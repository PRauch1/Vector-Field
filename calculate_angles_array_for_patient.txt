
calculate_angles_array_for_patient= function(p_id, 
                                             transf_angle_to_0_90=F, 
                                             mask_variant="t1+t2", 
                                             use_eigenvectors = T){

  # Check if the dimensions are equal:
  stopifnot(all(dim(e_val)==dim(e_vec)[1:3]), 
            all(dim(e_val)==dim(fa)),
            all(dim(e_val)==dim(t_fwd)[2:4]),
            all(dim(e_val)==dim(t1)),
            all(dim(e_val)==dim(t21)),
            all(dim(e_val)==dim(t2)))
  p_dim_1 = dim(t1)[1]
  p_dim_2 = dim(t1)[2]
  p_dim_3 = dim(t1)[3]
  cat(paste0("\t(*) All arrays are of equal length: ",p_dim_1,"x",p_dim_2,"x",p_dim_3,".\n"))
  
  # Select which type of vector should be used for DTI
  if(use_eigenvectors){
    dti_x = e_vec[,,,1]
    dti_y = e_vec[,,,2]
    dti_z = e_vec[,,,3]
  }
  else{
    dti_x = tensor[,,,,1]
    dti_y = tensor[,,,,3]
    dti_z = tensor[,,,,6]
  }
  
  # Get transformations and flip axis due to LPS instead of LAS
  t_fwd=t_fwd_list[[p_id]]
  t_fwd[2,,,] = (-1)*t_fwd[2,,,]
  
  t_fwd_dim_1 = t_fwd[1,,,]
  t_fwd_dim_2 = t_fwd[2,,,]
  t_fwd_dim_3 = t_fwd[3,,,]
  
  t1=t1_list[[p_id]]
  t2=t2_list[[p_id]]
  t21=t21_list[[p_id]]

  # Create mask for relevant voxels
  if(mask_variant=="t1+t2"){mask = t1+t2}
  else if(mask_variant=="t1"){mask = t1}
  else if(mask_variant=="t2"){mask = t2}
  else if(mask_variant=="t21"){mask = t21}
  else {stop(paste0(mask_variant," is an invalid argument for parameter 'mask_variant'!"))}

  
  # Create empty 3d array  
  angles_array = array(NA,dim=c(p_dim_1,p_dim_2,p_dim_3,1))
  
  # Calculate the angle for each element of the array
  for(dim_1 in 1:p_dim_1){     
    for(dim_2 in 1:p_dim_2){
      for(dim_3 in 1:p_dim_3){
        
        # Just compute angles for voxels where is/was glioma 
        if(mask[dim_1,dim_2,dim_3]!=0){

            angles_array[dim_1,dim_2,dim_3,1] = 
              calculate_angle_between_vectors(v1 = c(dti_x[dim_1,dim_2,dim_3],
                                                     dti_y[dim_1,dim_2,dim_3],
                                                     dti_z[dim_1,dim_2,dim_3]), 
                                              v2 = c(t_fwd_dim_1[dim_1,dim_2,dim_3],
                                                     t_fwd_dim_2[dim_1,dim_2,dim_3],
                                                     t_fwd_dim_3[dim_1,dim_2,dim_3]))
            
        } #end 'if not equals zero'
        
      } #end loop over dim_3
    } #end loop over dim_2
  } #end loop over dim_1
  
  # Transforming angle scale 0-180 to 0-90
  if(transf_angle_to_0_90){
    angles_array[angles_array>=90&!is.na(angles_array)] = 180-angles_array[angles_array>=90&!is.na(angles_array)]
  }
  
  # Mask corresponding voxels
  angles_array_mask = angles_array
  angles_array_mask[!is.na(angles_array_mask)] = 1
  angles_array_mask[is.na(angles_array_mask)] = 0
  
  output = list(angles_array=angles_array,
                angles_array_mask=angles_array_mask)
  
  return(output)
}
